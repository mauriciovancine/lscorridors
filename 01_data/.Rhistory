coord_polar() +
theme_void() +
theme(plot.background = element_rect(fill = "gray90", color = "gray30", size = 2),
plot.caption = element_text(face = "bold", color = "gray40", size = 10))
tibble(x, y) %>%
ggplot() +
geom_point(aes(x, y), size = .2, col = "blue") +
geom_point(aes(x, abs(y)-5), size = .2, col = "red") +
geom_point(aes(x, abs(y)-8), size = .2, col = "orange") +
geom_point(aes(x, abs(y)+3), size = .2, col = "maroon") +
ylim(c(-10, 10)) +
labs(caption = "GitHub: @mauriciovancine \n") +
coord_polar() +
theme_void() +
theme(plot.background = element_rect(fill = "gray90", color = "gray30", size = 2),
plot.caption = element_text(face = "bold", color = "gray40", size = 10))
tibble(x, y) %>%
ggplot() +
geom_point(aes(x, y), size = .2, col = "blue") +
geom_point(aes(x, abs(y)-5), size = .2, col = "red") +
geom_point(aes(x, abs(y)-10), size = .2, col = "orange") +
geom_point(aes(x, abs(y)+5), size = .2, col = "maroon") +
ylim(c(-10, 10)) +
labs(caption = "GitHub: @mauriciovancine \n") +
coord_polar() +
theme_void() +
theme(plot.background = element_rect(fill = "gray90", color = "gray30", size = 2),
plot.caption = element_text(face = "bold", color = "gray40", size = 10))
url <- "https://mapbiomas.org/colecoes-mapbiomas-1?cama_set_language=pt-BR"
xml2::read_html(url) %>%
rvest::html_nodes("a") %>%
rvest::html_attr("href")
library(rvest)
url <- "https://mapbiomas.org/colecoes-mapbiomas-1?cama_set_language=pt-BR"
xml2::read_html(url) %>%
rvest::html_nodes("a") %>%
rvest::html_attr("href")
url <- "https://console.cloud.google.com/storage/browser/mapbiomas-public/COLECAO/5/DOWNLOADS/COLECOES/ANUAL/AMAZONIA?pageState=(%22StorageObjectListTable%22:(%22f%22:%22%255B%255D%22))&authuser=0&prefix=&forceOnObjectsSortingFiltering=false"
xml2::read_html(url) %>%
rvest::html_nodes("a") %>%
rvest::html_attr("href")
devtools::install_github("rstudio/crosstalk")
la <- raster::raster()
la
library(raster)
library(fasterize)
library(rnaturalearth)
library(geobr)
rio_claro <- geobr::read_municipality(code_muni = 3543907, year = 2019)
rio_claro
plot(rio_claro$geom)
library(sf)
rio_claro <- geobr::read_municipality(code_muni = 3543907, year = 2019) %>%
sf::st_transform(31983)
rio_claro
plot(rio_claro$geom)
rio_claro_raster <- fasterize::fasterize(rio_claro)
rio_claro_raster
rio_claro_raster <- raster::rasterize(rio_claro)
rio_claro_raster <- fasterize::fasterize(rio_claro, rio_claro)
# packages
library(sf)
library(raster)
library(geobr)
# rasterize
rio_claro_raster <- fasterize::fasterize(rio_claro, rio_claro)
# rasterize
raster(rio_claro, res = 1)
# rasterize
raster(rio_claro, res = 30)
# rasterize
rio_claro_raster <- fasterize::fasterize(rio_claro, raster(rio_claro, res = 30))
rio_claro_raster
plot(rio_claro_raster)
r <- raster(ncol=36,nrow=18)
xy <- c(0,0)
r
xy <- c(0,0)
xy
plot(r)
d1 <- distanceFromPoints(r, xy)
d1
plot(d1)
d1 <- distance(r, xy)
?distanve
r <- raster(ncol=36,nrow=18)
values(r) <- NA
r[500] <- 1
dist <- distance(r)
plot(dist / 1000)
r
plot(r)
dist <- distance(r)
plot(dist / 1000)
plot(rio_claro_raster)
# distance
rio_claro_raster_dist <- raster::distance(raster)
# distance
rio_claro_raster_dist <- raster::distance(rio_claro_raster_dist)
# distance
rio_claro_raster_dist <- raster::distance(rio_claro_raster)
rio_claro_raster_dist
plot(rio_claro_raster_dist)
# invert
rio_claro_raster_inv <- raster::mask(rio_claro_raster, rio_claro, inverse = TRUE)
rio_claro_raster_inv
plot(rio_claro_raster_inv)
# rasterize
rio_claro_raster <- fasterize::fasterize(rio_claro, raster(rio_claro, res = 30), background = 1)
rio_claro_raster
plot(rio_claro_raster)
# invert
rio_claro_raster_inv <- raster::mask(rio_claro_raster, rio_claro, inverse = TRUE)
rio_claro_raster_inv
plot(rio_claro_raster_inv)
# distance
rio_claro_raster_dist <- raster::distance(rio_claro_raster)
# distance
rio_claro_raster_dist <- raster::distance(rio_claro_raster_inv)
rio_claro_raster_dist
plot(rio_claro_raster_dist)
# points
rio_claro_points <- sf::st_sample(rio_claro)
# points
rio_claro_points <- sf::st_sample(rio_claro, 10)
rio_claro_points
plot(rio_claro_points)
# points
rio_claro_points <- sf::st_sample(rio_claro, 10) %>%
sf::st_as_sf()
rio_claro_points
plot(rio_claro_points)
plot(rio_claro_points$x)
plot(rio_claro$geom)
plot(rio_claro$geom)
plot(rio_claro_points$x, pch = 20, add = TRUE)
plot(rio_claro$geom, col = "gray")
plot(rio_claro_points$x, pch = 20, add = TRUE)
# extract values
rio_claro_points_dist <- raster::extract(rio_claro_raster_dist, rio_claro_points)
rio_claro_points_dist
# extract values
rio_claro_points$dist <- raster::extract(rio_claro_raster_dist, rio_claro_points)
rio_claro_points
# points
rio_claro_points <- sf::st_sample(rio_claro, 10) %>%
sf::st_as_sf() %>%
dplyr::mutate(id = 1:10)
rio_claro_points
library(tmap)
tm_shape(rio_claro) +
tm_polygons()
tm_shape(rio_claro_raster) +
tm_raster()
tm_shape(rio_claro_raster_inv) +
tm_raster()
tm_shape(rio_claro_raster_dist) +
tm_raster()
tm_shape(rio_claro) +
tm_polygons() +
tm_shape(rio_claro_points) +
tm_bubbles() +
tm_text("id")
rio_claro_points
tm_shape(rio_claro) +
tm_polygons() +
tm_shape(rio_claro_points) +
tm_bubbles() +
tm_text("dist")
# extract values
rio_claro_points$dist <- raster::extract(rio_claro_raster_dist, rio_claro_points)
rio_claro_points
tm_shape(rio_claro) +
tm_polygons() +
tm_shape(rio_claro_points) +
tm_bubbles() +
tm_text("dist")
# distance
rio_claro_raster_dist <- raster::distance(rio_claro_raster_inv) %>% round(1)
rio_claro_raster_dist
# distance
rio_claro_raster_dist <- raster::distance(rio_claro_raster_inv) %>% round(0)
rio_claro_raster_dist
tm_shape(rio_claro_raster_dist) +
tm_raster()
rio_claro_points
# points
rio_claro_points <- sf::st_sample(rio_claro, 10) %>%
sf::st_as_sf() %>%
dplyr::mutate(id = 1:10)
tm_shape(rio_claro) +
tm_polygons() +
tm_shape(rio_claro_points) +
tm_bubbles() +
tm_text("id")
# extract values
rio_claro_points$dist <- raster::extract(rio_claro_raster_dist, rio_claro_points)
rio_claro_points
tm_shape(rio_claro) +
tm_polygons() +
tm_shape(rio_claro_points) +
tm_bubbles() +
tm_text("dist")
library(tidyverse)
# points
set.seed(42)
rio_claro_points <- sf::st_sample(rio_claro, 10) %>%
sf::st_as_sf() %>%
dplyr::mutate(id = 1:10)
rio_claro_points
tm_shape(rio_claro) +
tm_polygons() +
tm_shape(rio_claro_points) +
tm_bubbles() +
tm_text("id")
tm_shape(rio_claro) +
tm_polygons() +
tm_shape(rio_claro_points) +
tm_bubbles() +
tm_text("id")
# extract values
rio_claro_points$dist <- raster::extract(rio_claro_raster_dist, rio_claro_points)
rio_claro_points
tm_shape(rio_claro) +
tm_polygons() +
tm_shape(rio_claro_points) +
tm_bubbles() +
tm_text("dist")
library(RSelenium) # chamando a biblioteca
install.packages(RSelenium) # chamando a biblioteca
install.packages("RSelenium") # chamando a biblioteca
library(RSelenium) # chamando a biblioteca
# abrindo sistema de navegacao
rD = rsDriver(browser = "chrome", check = F) # abre o navegador sem verificar o driver atual check = F
remDr = rD[["client"]] # inicia a marionete
# abrindo sistema de navegacao
rD = rsDriver(browser = "chrome", check = TRUE) # abre o navegador sem verificar o driver atual check = F
# abrindo sistema de navegacao
rD = rsDriver(browser = "chrome", check = F) # abre o navegador sem verificar o driver atual check = F
# abrindo sistema de navegacao
rD = rsDriver(browser = "chrome", check = F) # abre o navegador sem verificar o driver atual check = F
rsDriver()
rD[["client"]]
# abrindo sistema de navegacao
rD = rsDriver(browser = "chrome", check = F) # abre o navegador sem verificar o driver atual check = F
# abrindo sistema de navegacao
rD = rsDriver() # abre o navegador sem verificar o driver atual check = F
# abrindo sistema de navegacao
rD = rsDriver() # abre o navegador sem verificar o driver atual check = F
library(RSelenium) # chamando a biblioteca
# abrindo sistema de navegacao
rD = rsDriver() # abre o navegador sem verificar o driver atual check = F
remDr = rD[["client"]] # inicia a marionete
remDr
Sys.sleep(10) # pausa de 10 segundos para carregar tudo 100%
# indo pro site e efetuando o login
remDr$navigate("https://www.passeidireto.com/login") # indo para a página de login
# indo pro site e efetuando o login
remDr$navigate("https://www.passeidireto.com/login") # indo para a página de login
lg = "mauricio.vancine@gmail.com" # coloque o seu email cadastrado
pw = "TidusFF010" # coloque a sua senha
webElem = remDr$findElement(using = 'xpath', "//input[@placeholder='Email']")
library(landscapemetrics)
citation("landscapemetrics")
library(iNEXT)
citation("iNEXT")
library(bbmle)
citation("bbmle")
citation
citation()
Sys.date()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
Sys.Date(
)
categories:
- talk
tags:
- r
- species distribution modeling
lastmod: "2020-03-04"
featured: no
image:
caption: "[Imagem by Maurício Vancine]"
focal_point: "center"
preview_only: no
projects: []
---
Os Modelos de Distribuição de Espécies (SDM - Species Distribution Models) relacionam dados de ocorrências das espécies com suas condições ambientais para estimar o nicho das espécies e assim predizer novas áreas de possível distribuição. Nessa palestra, falei dos principais conceitos, dados de entrada e aplicações dessa abordagem na área de Ecologia.
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown:::preview_site()
blogdown:::preview_site()
library(raster)
library(sp)
library(sf)
# make dummy polygons
grd <- GridTopology(c(1,1), c(1,1), c(10,10))
grd
plot(grd)
poly1 <- as.SpatialPolygons.GridTopology(grd)
poly1
plot(poly)
grd <- GridTopology(c(1,1), c(1,1), c(20,20))
grd <- GridTopology(c(1,1), c(1,1), c(20,20))
poly2<- as.SpatialPolygons.GridTopology(grd)
plot(poly2)
# make dummy polygons
grd <- GridTopology(c(1,1), c(1,1), c(10,10))
grd
poly1 <- as.SpatialPolygons.GridTopology(grd)
poly1
plot(poly1)
grd <- GridTopology(c(1,1), c(1,1), c(20,20))
poly2<- as.SpatialPolygons.GridTopology(grd)
plot(poly2)
# add to a list
polys <- list(poly1,poly2)
# extract the extent (min/max lon lat values) and put in a dataframe
x <- as.data.frame(do.call("rbind", lapply(polys, st_bbox)))
# add to a list
polys <- list(poly1,poly2)
# extract the extent (min/max lon lat values) and put in a dataframe
x <- as.data.frame(do.call("rbind", lapply(polys, st_bbox)))
library(raster)
library(sp)
library(sf)
# extract the extent (min/max lon lat values) and put in a dataframe
x <- as.data.frame(do.call("rbind", lapply(polys, st_bbox)))
x
# make a difference column for x and y
x$xdif <- x$xmax-x$xmin
x$ydif <- x$ymax-x$ymin
# subset by only 10 degree difference
x_sub <- subset(x, xdif < 20)
x
polys
library(tidyverse)
# extract the extent (min/max lon lat values) and put in a dataframe
map_dfr(polys, st_bbox)
# add to a list
polys <- list(poly1,poly2)
# extract the extent (min/max lon lat values) and put in a dataframe
map_dfr(polys, st_bbox)
x <- as.data.frame(do.call("rbind", lapply(polys, st_bbox)))
x
# extract the extent (min/max lon lat values) and put in a dataframe
map_dfr(polys, st_bbox)
polys
# extract the extent (min/max lon lat values) and put in a dataframe
map_df(polys, st_bbox)
# extract the extent (min/max lon lat values) and put in a dataframe
map(polys, st_bbox)
# extract the extent (min/max lon lat values) and put in a dataframe
map(polys, st_bbox) %>%
as_tibble()
map(polys, st_bbox)
# extract the extent (min/max lon lat values) and put in a dataframe
map(polys, st_bbox) %>%
as.data.frame()
# extract the extent (min/max lon lat values) and put in a dataframe
map(polys, st_bbox)
# extract the extent (min/max lon lat values) and put in a dataframe
map_raw(polys, st_bbox)
# extract the extent (min/max lon lat values) and put in a dataframe
map_chr(polys, st_bbox)
# extract the extent (min/max lon lat values) and put in a dataframe
map_sf(polys, st_bbox)
# extract the extent (min/max lon lat values) and put in a dataframe
map_df(polys, st_bbox)
# extract the extent (min/max lon lat values) and put in a dataframe
map_dfc(polys, st_bbox)
# extract the extent (min/max lon lat values) and put in a dataframe
map_dfr(polys, st_bbox)
polys
lapply(polys, st_bbox)
do.call("rbind", lapply(polys, st_bbox))
x <- as.data.frame(do.call("rbind", lapply(polys, st_bbox)))
x
# make a difference column for x and y
x$xdif <- x$xmax-x$xmin
x$ydif <- x$ymax-x$ymin
library(ggplot2)
df <- data.frame(x = rnorm(100), y = rnorm(100))
ggplot(sf, aes( x, round(y, 2)) +  geom_point()
ggplot(df, aes( x, round(y, 2)) +  geom_point()
ggplot(df, aes( x, round(y, 2)) + geom_point()
library(ggplot2)
df <- data.frame(x = rnorm(100), y = rnorm(100))
ggplot(df, aes( x, round(y, 2)) + geom_point()
ggplot(df, aes(x, round(y, 2))) +
geom_point()
library(ggplot2)
df <- data.frame(x = rnorm(100), y = rnorm(100))
ggplot(df, aes(x, round(y, 2))) +
geom_point()
library(ggplot2)
df <- data.frame(x = rnorm(100), y = rnorm(100))
ggplot(df, aes(x, round(y, 2))) +
geom_point()
library(ggplot2)
df <- data.frame(x = rnorm(100), y = rnorm(100))
ggplot(df, aes(x, round(y, 2))) +
geom_point()
library(ggplot2)
df <- data.frame(x = rnorm(100), y = rnorm(100))
ggplot(df, aes(x, round(y, 2))) +
geom_point()
library(ggplot2)
df <- data.frame(x = rnorm(100), y = rnorm(100))
ggplot(df, aes(x, round(y, 1))) +
geom_point()
library(ggplot2)
df <- data.frame(x = rnorm(100), y = rnorm(100))
ggplot(df, aes(x, round(y, 1))) +
geom_point()
install.packages("googledrive")
library(googledrive)
#Assessar pasta do driver
pasta <- as_dribble(as_id("10SvsKATBfSm-WS3G5meLwJGzaITOGkEC"))
#Assessar pasta do driver
pasta <- as_dribble(as_id("10SvsKATBfSm-WS3G5meLwJGzaITOGkEC"))
pasta
#atribuir arquivo sa uma lista
arquivo <- drive_ls(path = pasta, pattern = ".rar" recursive = TRUE )
#atribuir arquivo sa uma lista
arquivo <- drive_ls(path = pasta, pattern = ".rar", recursive = TRUE )
arquivo
#Assessar pasta do driver
pasta <- as_dribble(as_id("1HloJ_kp1clpZapk743BukGnrfsBcYyEH"))
pasta
#atribuir arquivo sa uma lista
arquivo <- drive_ls(path = pasta, pattern = ".pdf", recursive = TRUE )
arquivo
#Download
drive_download(arquivo)
# countries
cn <- tibble::tibble(code = read_html("https://amphibiansoftheworld.amnh.org/Amphibia/") %>%
html_nodes("option") %>%
html_attr("value"),
country = read_html("https://amphibiansoftheworld.amnh.org/Amphibia/") %>%
html_nodes("option") %>%
html_text())[-1, ] %>%
dplyr::filter(country %in% c("Brazil"))
# packages
library(tidyverse)
library(rvest)
library(stringi)
library(plyr)
# countries
cn <- tibble::tibble(code = read_html("https://amphibiansoftheworld.amnh.org/Amphibia/") %>%
html_nodes("option") %>%
html_attr("value"),
country = read_html("https://amphibiansoftheworld.amnh.org/Amphibia/") %>%
html_nodes("option") %>%
html_text())[-1, ] %>%
dplyr::filter(country %in% c("Brazil"))
cn
da_final <- tibble::tibble()
10+2
1:42
1:42
library(sf)
setwd("/home/mude/data/github/lsmetrics/01_data")
library(sf)
rc <- st_read("rio_claro_limit.shp") %>%
st_transform(crs = 4326)
mb <- raster::raster("COLECAO_5_DOWNLOADS_COLECOES_ANUAL_MATAATLANTICA_MATAATLANTICA-2019.tif")
library(raster)
mb %>%
raster::crop(rc) %>%
writeRaster("mapbiomas_c5_2019_rio_claro",
format = "GTiff",
datatype = "INT1U",
options=c("COMPRESS=DEFLATE"))
st_read("rio_claro_limit.shp") %>%
st_transform(crs = 31983) %>%
st_write("rio_claro_limit_sirgas2000_utm23s.shp")
